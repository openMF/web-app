/**
 * Apache Fineract REST API
 * Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.
 *
 * The version of the OpenAPI document: 0.0.0-9ca128fc
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Money } from './money';
import { MonetaryCurrency } from './monetaryCurrency';
import { LoanProductGuaranteeDetails } from './loanProductGuaranteeDetails';
import { Rate } from './rate';
import { Charge } from './charge';
import { LoanProductConfigurableAttributes } from './loanProductConfigurableAttributes';
import { DelinquencyBucket } from './delinquencyBucket';
import { LoanProductTrancheDetails } from './loanProductTrancheDetails';
import { LoanProductInterestRecalculationDetails } from './loanProductInterestRecalculationDetails';
import { LoanProductRelatedDetail } from './loanProductRelatedDetail';
import { LoanProductFloatingRates } from './loanProductFloatingRates';


export interface LoanProduct { 
    accountingDisabled?: boolean;
    accountingType?: number;
    accrualBasedAccountingEnabled?: boolean;
    allowApprovedDisbursedAmountsOverApplied?: boolean;
    arrearsBasedOnOriginalSchedule?: boolean;
    cashBasedAccountingEnabled?: boolean;
    closeDate?: string;
    currency?: MonetaryCurrency;
    delinquencyBucket?: DelinquencyBucket;
    disallowExpectedDisbursements?: boolean;
    dueDaysForRepaymentEvent?: number;
    equalAmortization?: boolean;
    externalId?: string;
    fixedPrincipalPercentagePerInstallment?: number;
    floatingRates?: LoanProductFloatingRates;
    holdGuaranteeFundsEnabled?: boolean;
    id?: number;
    includeInBorrowerCycle?: boolean;
    installmentAmountInMultiplesOf?: number;
    interestPeriodFrequencyType?: LoanProduct.InterestPeriodFrequencyTypeEnum;
    interestRecalculationEnabled?: boolean;
    linkedToFloatingInterestRate?: boolean;
    loanProductCharges?: Array<Charge>;
    loanProductConfigurableAttributes?: LoanProductConfigurableAttributes;
    loanProductGuaranteeDetails?: LoanProductGuaranteeDetails;
    loanProductRelatedDetail?: LoanProductRelatedDetail;
    loanProductTrancheDetails?: LoanProductTrancheDetails;
    maxNominalInterestRatePerPeriod?: number;
    maxNumberOfRepayments?: number;
    maxPrincipalAmount?: Money;
    minNominalInterestRatePerPeriod?: number;
    minNumberOfRepayments?: number;
    minPrincipalAmount?: Money;
    minimumDaysBetweenDisbursalAndFirstRepayment?: number;
    multiDisburseLoan?: boolean;
    _new?: boolean;
    nominalInterestRatePerPeriod?: number;
    numberOfRepayments?: number;
    overAppliedCalculationType?: string;
    overAppliedNumber?: number;
    overDueDaysForRepaymentEvent?: number;
    periodicAccrualAccountingEnabled?: boolean;
    principalAmount?: Money;
    principalThresholdForLastInstallment?: number;
    productInterestRecalculationDetails?: LoanProductInterestRecalculationDetails;
    rates?: Array<Rate>;
    repaymentStrategy?: string;
    shortName?: string;
    startDate?: string;
    syncExpectedWithDisbursementDate?: boolean;
    transactionProcessingStrategyCode?: string;
    transactionProcessingStrategyName?: string;
    upfrontAccrualAccountingEnabled?: boolean;
}
export namespace LoanProduct {
    export type InterestPeriodFrequencyTypeEnum = 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS' | 'WHOLE_TERM' | 'INVALID';
    export const InterestPeriodFrequencyTypeEnum = {
        Days: 'DAYS' as InterestPeriodFrequencyTypeEnum,
        Weeks: 'WEEKS' as InterestPeriodFrequencyTypeEnum,
        Months: 'MONTHS' as InterestPeriodFrequencyTypeEnum,
        Years: 'YEARS' as InterestPeriodFrequencyTypeEnum,
        WholeTerm: 'WHOLE_TERM' as InterestPeriodFrequencyTypeEnum,
        Invalid: 'INVALID' as InterestPeriodFrequencyTypeEnum
    };
}


