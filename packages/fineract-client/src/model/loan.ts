/**
 * Apache Fineract REST API
 * Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.
 *
 * The version of the OpenAPI document: 0.0.0-9ca128fc
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LoanRepaymentScheduleInstallment } from './loanRepaymentScheduleInstallment';
import { Office } from './office';
import { Group } from './group';
import { LoanCollateralManagement } from './loanCollateralManagement';
import { LoanTermVariations } from './loanTermVariations';
import { MonetaryCurrency } from './monetaryCurrency';
import { Rate } from './rate';
import { ExternalId } from './externalId';
import { Staff } from './staff';
import { LoanInterestRecalculationDetails } from './loanInterestRecalculationDetails';
import { LoanProduct } from './loanProduct';
import { PostDatedChecks } from './postDatedChecks';
import { DisbursementData } from './disbursementData';
import { LoanCharge } from './loanCharge';
import { Money } from './money';
import { LoanTopupDetails } from './loanTopupDetails';
import { LoanDisbursementDetails } from './loanDisbursementDetails';
import { Client } from './client';
import { LoanTransaction } from './loanTransaction';
import { LoanSummary } from './loanSummary';
import { LoanCollateral } from './loanCollateral';
import { LoanProductRelatedDetail } from './loanProductRelatedDetail';
import { GroupLoanIndividualMonitoringAccount } from './groupLoanIndividualMonitoringAccount';


export interface Loan { 
    accountNumber?: string;
    accountNumberRequiresAutoGeneration?: boolean;
    accountingDisabledOnLoanProduct?: boolean;
    accruedTill?: string;
    activeCharges?: Set<LoanCharge>;
    activeLoanTermVariations?: Set<LoanTermVariations>;
    actualDisbursementDate?: string;
    allDisbursementDetails?: Array<LoanDisbursementDetails>;
    approved?: boolean;
    approvedOnDate?: string;
    approvedPrincipal?: number;
    chargedOff?: boolean;
    chargedOffOnDate?: string;
    charges?: Array<LoanCharge>;
    chargesAdditionAllowed?: boolean;
    client?: Client;
    clientId?: number;
    closed?: boolean;
    closedOnDate?: string;
    closedWrittenOff?: boolean;
    collateral?: Set<LoanCollateral>;
    createdBy?: number;
    createdDate?: string;
    currency?: MonetaryCurrency;
    currencyCode?: string;
    currentLoanCounter?: number;
    disburseAmountForTemplate?: number;
    disbursed?: boolean;
    disbursedAmount?: number;
    disbursementDate?: string;
    disbursementDetails?: Array<LoanDisbursementDetails>;
    disbursmentData?: Array<DisbursementData>;
    expectedDisbursedOnLocalDate?: string;
    expectedDisbursedOnLocalDateForTemplate?: string;
    expectedFirstRepaymentOnDate?: string;
    expectedMaturityDate?: string;
    externalId?: ExternalId;
    feeCompoundingEnabledForInterestRecalculation?: boolean;
    firstDisbursalAmount?: number;
    fixedEmiAmount?: number;
    fraud?: boolean;
    glim?: GroupLoanIndividualMonitoringAccount;
    glimId?: number;
    group?: Group;
    groupId?: number;
    groupLoan?: boolean;
    guaranteeAmount?: number;
    id?: number;
    individualLoan?: boolean;
    interestBearing?: boolean;
    interestChargedFromDate?: string;
    interestRateDifferential?: number;
    interestRecalculationEnabledForProduct?: boolean;
    isFloatingInterestRate?: boolean;
    isTopup?: boolean;
    jlgloan?: boolean;
    lastClosedBusinessDate?: string;
    lastLoanRepaymentScheduleInstallment?: LoanRepaymentScheduleInstallment;
    lastModifiedBy?: number;
    lastModifiedDate?: string;
    lastPaymentTransaction?: LoanTransaction;
    lastRepaymentDate?: string;
    lastRepaymentTransaction?: LoanTransaction;
    lastUserTransaction?: LoanTransaction;
    lastUserTransactionDate?: string;
    lastUserTransactionForChargeCalc?: string;
    loanCharges?: Array<LoanCharge>;
    loanCollateralManagements?: Set<LoanCollateralManagement>;
    loanInterestRecalculationDetails?: LoanInterestRecalculationDetails;
    loanOfficer?: Staff;
    loanProduct?: LoanProduct;
    loanProductLoanCounter?: number;
    loanProductRelatedDetail?: LoanProductRelatedDetail;
    loanRepaymentScheduleDetail?: LoanProductRelatedDetail;
    loanRepaymentScheduleInstallmentsSize?: number;
    loanStatus?: number;
    loanSubStatus?: number;
    loanSummary?: LoanSummary;
    loanTermVariations?: Array<LoanTermVariations>;
    loanTransactions?: Array<LoanTransaction>;
    loanType?: number;
    maturityDate?: string;
    maxOutstandingLoanBalance?: number;
    multiDisburmentLoan?: boolean;
    netDisbursalAmount?: number;
    _new?: boolean;
    nextPossibleRepaymentDateForRescheduling?: string;
    noneOrCashOrUpfrontAccrualAccountingEnabledOnLoanProduct?: boolean;
    notSubmittedAndPendingApproval?: boolean;
    npa?: boolean;
    numberOfRepayments?: number;
    office?: Office;
    officeId?: number;
    open?: boolean;
    overpaidOnDate?: string;
    periodicAccrualAccountingEnabledOnLoanProduct?: boolean;
    plainStatus?: number;
    postDatedChecks?: Array<PostDatedChecks>;
    principal?: Money;
    principalAmountForRepaymentSchedule?: number;
    proposedPrincipal?: number;
    rates?: Array<Rate>;
    repaymentScheduleInstallments?: Array<LoanRepaymentScheduleInstallment>;
    status?: Loan.StatusEnum;
    submittedAndPendingApproval?: boolean;
    submittedOnDate?: string;
    summary?: LoanSummary;
    syncDisbursementWithMeeting?: boolean;
    termFrequency?: number;
    termPeriodFrequencyType?: number;
    topup?: boolean;
    topupLoanDetails?: LoanTopupDetails;
    totalInterest?: number;
    totalOverpaid?: number;
    totalRecoveredPayments?: Money;
    totalWrittenOff?: number;
    upfrontAccrualAccountingEnabledOnLoanProduct?: boolean;
    writtenOffDate?: string;
}
export namespace Loan {
    export type StatusEnum = 'INVALID' | 'SUBMITTED_AND_PENDING_APPROVAL' | 'APPROVED' | 'ACTIVE' | 'TRANSFER_IN_PROGRESS' | 'TRANSFER_ON_HOLD' | 'WITHDRAWN_BY_CLIENT' | 'REJECTED' | 'CLOSED_OBLIGATIONS_MET' | 'CLOSED_WRITTEN_OFF' | 'CLOSED_RESCHEDULE_OUTSTANDING_AMOUNT' | 'OVERPAID';
    export const StatusEnum = {
        Invalid: 'INVALID' as StatusEnum,
        SubmittedAndPendingApproval: 'SUBMITTED_AND_PENDING_APPROVAL' as StatusEnum,
        Approved: 'APPROVED' as StatusEnum,
        Active: 'ACTIVE' as StatusEnum,
        TransferInProgress: 'TRANSFER_IN_PROGRESS' as StatusEnum,
        TransferOnHold: 'TRANSFER_ON_HOLD' as StatusEnum,
        WithdrawnByClient: 'WITHDRAWN_BY_CLIENT' as StatusEnum,
        Rejected: 'REJECTED' as StatusEnum,
        ClosedObligationsMet: 'CLOSED_OBLIGATIONS_MET' as StatusEnum,
        ClosedWrittenOff: 'CLOSED_WRITTEN_OFF' as StatusEnum,
        ClosedRescheduleOutstandingAmount: 'CLOSED_RESCHEDULE_OUTSTANDING_AMOUNT' as StatusEnum,
        Overpaid: 'OVERPAID' as StatusEnum
    };
}


